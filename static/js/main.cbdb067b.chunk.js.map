{"version":3,"sources":["assets/Pokedex.png","assets/pokemon-theme-song.mp3","pokedex/Pokedex.js","App.js","reportWebVitals.js","index.js"],"names":["Pokedex","useState","pokemons","setPokemons","currentPokemon","setCurrentPokemon","userGuess","setUserGuess","correctAnswer","setCorrectAnswer","guessButtonDisabled","setGuessButtonDisabled","score","setScore","started","setStarted","themeSong","Audio","pokemonThemeSong","loop","startButtonStyle","position","top","left","marginLeft","visibility","changePokemon","pokemonArray","max","length","random","Math","idx","floor","useEffect","a","axios","get","pokedex","entries","data","pokemon_entries","pokemonsData","map","entry","id","entry_number","name","pokemon_species","toUpperCase","sprite","fetchData","result","className","src","pokedexImg","alt","Button","style","variant","color","onClick","play","TextField","width","value","error","onChange","e","target","disabled","border","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbdb067b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Pokedex.74f5d63c.png\";","export default __webpack_public_path__ + \"static/media/pokemon-theme-song.74b2ad30.mp3\";","import { React, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button, TextField } from '@material-ui/core';\nimport pokedexImg from '../assets/Pokedex.png'\nimport pokemonThemeSong from '../assets/pokemon-theme-song.mp3'\nimport './Pokedex.css'\n\nconst POKEDEX_URL = 'https://pokeapi.co/api/v2/pokedex/2';\n\nconst Pokedex = () => {\n\n    const [pokemons, setPokemons] = useState([]);\n    const [currentPokemon, setCurrentPokemon] = useState();\n    const [userGuess, setUserGuess] = useState('');\n    const [correctAnswer, setCorrectAnswer] = useState();\n    const [guessButtonDisabled, setGuessButtonDisabled] = useState();\n    const [score, setScore] = useState(0);\n    const [started, setStarted] = useState(false);\n\n    const themeSong = new Audio(pokemonThemeSong);\n    themeSong.loop = true;\n\n    const textFieldStyle = {\n        position: 'absolute',\n        width: '200px',\n        top: '300px',\n        left: '50%',\n        marginLeft: '120px'\n    }\n    \n    const startButtonStyle = {\n        position: 'absolute',\n        top: '335px',\n        left: '50%',\n        marginLeft: '180px',\n        visibility: started ? 'hidden' : 'visible'\n    }\n\n    const buttonStyle = {\n        position: 'absolute',\n        top: '405px',\n        left: '50%',\n        marginLeft: '180px'\n    }\n\n    const start = () => {\n        setStarted(true);\n        themeSong.play();\n    }\n\n    const changePokemon = pokemonArray => {\n        const max = pokemonArray.length;\n        const random = Math.random() * max;\n        const idx = Math.floor(random);\n        setCurrentPokemon(pokemonArray[idx]);\n        setUserGuess('');\n    }\n\n    const nextPokemon = () => {\n        changePokemon(pokemons);\n        setScore(score + 1);\n    }\n\n    // Fetch pokedex data, only runs at the component mounting\n    useEffect(() => {\n        const fetchData = async () => {\n            const pokedex = await axios.get(POKEDEX_URL);\n            const entries = pokedex.data.pokemon_entries;\n            const pokemonsData = entries.map(entry => ({\n                id: entry.entry_number,\n                name: entry.pokemon_species.name.toUpperCase(),\n                sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${entry.entry_number}.png`\n            }));\n            setPokemons(pokemonsData);\n            changePokemon(pokemonsData);\n        }\n        fetchData();\n    }, []);\n\n    // Validate user guess\n    useEffect(() => {\n        const validateUserGuess = () => {\n            if (!currentPokemon) {\n                return false;\n            } else {\n                return userGuess.toUpperCase() === currentPokemon.name;\n            }\n        }\n\n        const result = validateUserGuess();\n        setCorrectAnswer(result);\n        setGuessButtonDisabled(!result);\n    }, [userGuess, currentPokemon]);\n\n    return (\n        <div className='container'>\n            <img src={pokedexImg} alt='Pokedex' className='pokedex' />\n            <Button \n                style={startButtonStyle}\n                variant='contained'\n                color='primary'\n                onClick={ () => start() } >\n                    Start!\n            </Button>\n            { started ?\n                <div>\n                    { currentPokemon ?\n                        <img src={currentPokemon.sprite} alt={ currentPokemon.name } className='pokemon'/>\n                        : null\n                    }\n                    <TextField style={textFieldStyle} value={userGuess} error={!correctAnswer} onChange={ e => setUserGuess(e.target.value) } />\n                    <Button \n                        style={buttonStyle}\n                        variant='contained'\n                        disabled={guessButtonDisabled}\n                        color='primary'\n                        onClick={ () => nextPokemon() } >\n                            Next!\n                    </Button>\n                    <img \n                        src=\"https://fontmeme.com/permalink/210112/acc6915a3b1c8f2927dd3d0a562bab86.png\" \n                        className='score' \n                        alt=\"score\" \n                        border=\"0\"\n                    />\n                    <label className='score-points'>{score}</label>\n                    <img src=\"https://fontmeme.com/permalink/210112/dc1f33a485097e475278d5b3fad8e30c.png\" \n                        className='logo'\n                        alt=\"pokemon-font\" \n                        border=\"0\"\n                    />\n                </div> : null\n            }\n        </div>\n    );\n}\n\nexport default Pokedex;","import './App.css';\nimport Pokedex from './pokedex/Pokedex';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokedex />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}