{"version":3,"sources":["pokedex/Pokedex.js","App.js","reportWebVitals.js","index.js"],"names":["Pokedex","useState","pokemons","setPokemons","currentPokemon","setCurrentPokemon","userGuess","setUserGuess","correctAnswer","setCorrectAnswer","guessButtonDisabled","setGuessButtonDisabled","changePokemon","pokemonArray","max","length","random","Math","idx","floor","useEffect","a","axios","get","pokedex","entries","data","pokemon_entries","pokemonsData","map","entry","id","entry_number","name","pokemon_species","toUpperCase","sprite","fetchData","result","src","alt","TextField","value","error","onChange","e","target","Button","variant","disabled","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sRAoEeA,EA9DC,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAEXC,EAFW,KAEDC,EAFC,OAG0BF,qBAH1B,mBAGXG,EAHW,KAGKC,EAHL,OAIgBJ,mBAAS,IAJzB,mBAIXK,EAJW,KAIAC,EAJA,OAKwBN,qBALxB,mBAKXO,EALW,KAKIC,EALJ,OAMoCR,qBANpC,mBAMXS,EANW,KAMUC,EANV,KASZC,EAAgB,SAAAC,GAClB,IAAMC,EAAMD,EAAaE,OACnBC,EAASC,KAAKD,SAAWF,EACzBI,EAAMD,KAAKE,MAAMH,GACvBX,EAAkBQ,EAAaK,IAC/BX,EAAa,KAmCjB,OA9BAa,qBAAU,YACS,uCAAG,gCAAAC,EAAA,sEACQC,IAAMC,IAvBpB,uCAsBM,OACRC,EADQ,OAERC,EAAUD,EAAQE,KAAKC,gBACvBC,EAAeH,EAAQI,KAAI,SAAAC,GAAK,MAAK,CACvCC,GAAID,EAAME,aACVC,KAAMH,EAAMI,gBAAgBD,KAAKE,cACjCC,OAAO,mGAAD,OAAqGN,EAAME,aAA3G,YAEV7B,EAAYyB,GACZhB,EAAcgB,GATA,2CAAH,qDAWfS,KACD,IAGHjB,qBAAU,WACN,IAQMkB,IAPGlC,GAGME,EAAU6B,gBAAkB/B,EAAe6B,KAK1DxB,EAAiB6B,GACjB3B,GAAwB2B,KACzB,CAAChC,EAAWF,IAGX,gCAEMA,EACE,qBAAKmC,IAAKnC,EAAegC,OAAQI,IAAMpC,EAAe6B,OACpD,KAEN,cAACQ,EAAA,EAAD,CAAWV,GAAG,iBAAiBW,MAAOpC,EAAWqC,OAAQnC,EAAeoC,SAAW,SAAAC,GAAC,OAAItC,EAAasC,EAAEC,OAAOJ,UAC9G,cAACK,EAAA,EAAD,CAAQC,QAAQ,YAAYC,SAAUvC,EAAqBwC,QAAU,kBAAMtC,EAAcV,IAAzF,uBCpDGiD,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.79f3d6fc.chunk.js","sourcesContent":["import { React, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button, TextField, CircularProgress } from '@material-ui/core';\n\nconst POKEDEX_URL = 'https://pokeapi.co/api/v2/pokedex/2';\n\nconst Pokedex = () => {\n\n    const [pokemons, setPokemons] = useState([]);\n    const [currentPokemon, setCurrentPokemon] = useState();\n    const [userGuess, setUserGuess] = useState('');\n    const [correctAnswer, setCorrectAnswer] = useState();\n    const [guessButtonDisabled, setGuessButtonDisabled] = useState();\n    // const [loading, setLoading] = useState(false);\n\n    const changePokemon = pokemonArray => {\n        const max = pokemonArray.length;\n        const random = Math.random() * max;\n        const idx = Math.floor(random);\n        setCurrentPokemon(pokemonArray[idx]);\n        setUserGuess('');\n        // setLoading(true);\n    }\n\n    // Fetch pokedex data, only runs at the component mounting\n    useEffect(() => {\n        const fetchData = async () => {\n            const pokedex = await axios.get(POKEDEX_URL);\n            const entries = pokedex.data.pokemon_entries;\n            const pokemonsData = entries.map(entry => ({\n                id: entry.entry_number,\n                name: entry.pokemon_species.name.toUpperCase(),\n                sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${entry.entry_number}.png`\n            }));\n            setPokemons(pokemonsData);\n            changePokemon(pokemonsData);\n        }\n        fetchData();\n    }, []);\n\n    // Validate user guess\n    useEffect(() => {\n        const validateUserGuess = () => {\n            if (!currentPokemon) {\n                return false;\n            } else {\n                return userGuess.toUpperCase() === currentPokemon.name;\n            }\n        }\n\n        const result = validateUserGuess();\n        setCorrectAnswer(result);\n        setGuessButtonDisabled(!result);\n    }, [userGuess, currentPokemon]);\n\n    return (\n        <div>\n            { /* <CircularProgress style={{ visibility: loading ? '' : 'hidden' }} /> */ }\n            { currentPokemon ?\n                <img src={currentPokemon.sprite} alt={ currentPokemon.name } /*onLoad={() => setLoading(false)}*/ />\n                : null\n            }\n            <TextField id=\"standard-basic\" value={userGuess} error={!correctAnswer} onChange={ e => setUserGuess(e.target.value) } />\n            <Button variant=\"contained\" disabled={guessButtonDisabled} onClick={ () => changePokemon(pokemons) } >Next!</Button>\n        </div>\n    );\n}\n\nexport default Pokedex;","import './App.css';\nimport Pokedex from './pokedex/Pokedex';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokedex />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}