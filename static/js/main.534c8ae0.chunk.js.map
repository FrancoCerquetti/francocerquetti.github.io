{"version":3,"sources":["pokedex/Pokedex.png","pokedex/Pokedex.js","App.js","reportWebVitals.js","index.js"],"names":["Pokedex","useState","pokemons","setPokemons","currentPokemon","setCurrentPokemon","userGuess","setUserGuess","correctAnswer","setCorrectAnswer","guessButtonDisabled","setGuessButtonDisabled","score","setScore","textFieldStyle","position","width","top","left","useMediaQuery","buttonStyle","iconStyle","changePokemon","pokemonArray","max","length","random","Math","idx","floor","useEffect","a","axios","get","pokedex","entries","data","pokemon_entries","pokemonsData","map","entry","id","entry_number","name","pokemon_species","toUpperCase","sprite","fetchData","result","class","src","pokedexImg","alt","className","TextField","style","value","error","onChange","e","target","Button","variant","disabled","color","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qUAAe,MAA0B,oCC2G1BA,G,MAjGC,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAEXC,EAFW,KAEDC,EAFC,OAG0BF,qBAH1B,mBAGXG,EAHW,KAGKC,EAHL,OAIgBJ,mBAAS,IAJzB,mBAIXK,EAJW,KAIAC,EAJA,OAKwBN,qBALxB,mBAKXO,EALW,KAKIC,EALJ,OAMoCR,qBANpC,mBAMXS,EANW,KAMUC,EANV,OAOQV,mBAAS,GAPjB,mBAOXW,EAPW,KAOJC,EAPI,KAUZC,EAAiB,CACnBC,SAAU,WACVC,MAAO,QACPC,IAAK,QACLC,KAAMC,YAAc,+CAAiD,QAAU,UAG7EC,EAAc,CAChBL,SAAU,WACVE,IAAK,QACLC,KAAMC,YAAc,+CAAiD,QAAU,UAG7EE,EAAY,CACdN,SAAU,WACVE,IAAK,QACLC,KAAMC,YAAc,+CAAiD,QAAU,UAG7EG,EAAgB,SAAAC,GAClB,IAAMC,EAAMD,EAAaE,OACnBC,EAASC,KAAKD,SAAWF,EACzBI,EAAMD,KAAKE,MAAMH,GACvBrB,EAAkBkB,EAAaK,IAC/BrB,EAAa,KAwCjB,OA9BAuB,qBAAU,YACS,uCAAG,gCAAAC,EAAA,sEACQC,IAAMC,IAhDpB,uCA+CM,OACRC,EADQ,OAERC,EAAUD,EAAQE,KAAKC,gBACvBC,EAAeH,EAAQI,KAAI,SAAAC,GAAK,MAAK,CACvCC,GAAID,EAAME,aACVC,KAAMH,EAAMI,gBAAgBD,KAAKE,cACjCC,OAAO,mGAAD,OAAqGN,EAAME,aAA3G,YAEVvC,EAAYmC,GACZhB,EAAcgB,GATA,2CAAH,qDAWfS,KACD,IAGHjB,qBAAU,WACN,IAQMkB,IAPG5C,GAGME,EAAUuC,gBAAkBzC,EAAeuC,KAK1DlC,EAAiBuC,GACjBrC,GAAwBqC,KACzB,CAAC1C,EAAWF,IAGX,sBAAK6C,MAAM,YAAX,UAEI,qBAAKC,IAAKC,EAAYC,IAAI,UAAUC,UAAU,YAC5CjD,EACE,qBAAK8C,IAAK9C,EAAe0C,OAAQM,IAAMhD,EAAeuC,KAAOU,UAAU,YACrE,KAEN,cAACC,EAAA,EAAD,CAAWC,MAAOzC,EAAgB0C,MAAOlD,EAAWmD,OAAQjD,EAAekD,SAAW,SAAAC,GAAC,OAAIpD,EAAaoD,EAAEC,OAAOJ,UACjH,cAACK,EAAA,EAAD,CACIN,MAAOnC,EACP0C,QAAQ,YACRC,SAAUrD,EACVsD,MAAM,UACNC,QAAU,kBAjDlB3C,EAAcpB,QACdW,EAASD,EAAQ,IA2Cb,mBAQA,cAAC,IAAD,CAAW2C,MAAOlC,IAClB,wBAAOgC,UAAU,QAAjB,oBAAiCzC,UC3F9BsD,MARf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,cAAC,EAAD,OCMSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.534c8ae0.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Pokedex.74f5d63c.png\";","import { React, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button, TextField } from '@material-ui/core';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ScoreIcon from '@material-ui/icons/Score';\nimport pokedexImg from './Pokedex.png'\nimport './Pokedex.css'\n\nconst POKEDEX_URL = 'https://pokeapi.co/api/v2/pokedex/2';\n\nconst Pokedex = () => {\n\n    const [pokemons, setPokemons] = useState([]);\n    const [currentPokemon, setCurrentPokemon] = useState();\n    const [userGuess, setUserGuess] = useState('');\n    const [correctAnswer, setCorrectAnswer] = useState();\n    const [guessButtonDisabled, setGuessButtonDisabled] = useState();\n    const [score, setScore] = useState(0);\n    // const [loading, setLoading] = useState(false);\n\n    const textFieldStyle = {\n        position: 'absolute',\n        width: '200px',\n        top: '300px',\n        left: useMediaQuery('(min-width: 1440px) and (max-width: 1919px)') ? '840px' : '1080px',\n    }\n    \n    const buttonStyle = {\n        position: 'absolute',\n        top: '405px',\n        left: useMediaQuery('(min-width: 1440px) and (max-width: 1919px)') ? '905px' : '1145px',\n    }\n    \n    const iconStyle = {\n        position: 'absolute',\n        top: '373px',\n        left: useMediaQuery('(min-width: 1440px) and (max-width: 1919px)') ? '895px' : '1135px',\n    }\n\n    const changePokemon = pokemonArray => {\n        const max = pokemonArray.length;\n        const random = Math.random() * max;\n        const idx = Math.floor(random);\n        setCurrentPokemon(pokemonArray[idx]);\n        setUserGuess('');\n        // setLoading(true);\n    }\n\n    const nextPokemon = () => {\n        changePokemon(pokemons);\n        setScore(score + 1);\n    }\n\n    // Fetch pokedex data, only runs at the component mounting\n    useEffect(() => {\n        const fetchData = async () => {\n            const pokedex = await axios.get(POKEDEX_URL);\n            const entries = pokedex.data.pokemon_entries;\n            const pokemonsData = entries.map(entry => ({\n                id: entry.entry_number,\n                name: entry.pokemon_species.name.toUpperCase(),\n                sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${entry.entry_number}.png`\n            }));\n            setPokemons(pokemonsData);\n            changePokemon(pokemonsData);\n        }\n        fetchData();\n    }, []);\n\n    // Validate user guess\n    useEffect(() => {\n        const validateUserGuess = () => {\n            if (!currentPokemon) {\n                return false;\n            } else {\n                return userGuess.toUpperCase() === currentPokemon.name;\n            }\n        }\n\n        const result = validateUserGuess();\n        setCorrectAnswer(result);\n        setGuessButtonDisabled(!result);\n    }, [userGuess, currentPokemon]);\n\n    return (\n        <div class='container'>\n            { /* <CircularProgress style={{ visibility: loading ? '' : 'hidden' }} /> */ }\n            <img src={pokedexImg} alt='Pokedex' className='pokedex' />\n            { currentPokemon ?\n                <img src={currentPokemon.sprite} alt={ currentPokemon.name } className='pokemon' /*onLoad={() => setLoading(false)}*/ />\n                : null\n            }\n            <TextField style={textFieldStyle} value={userGuess} error={!correctAnswer} onChange={ e => setUserGuess(e.target.value) } />\n            <Button \n                style={buttonStyle}\n                variant='contained'\n                disabled={guessButtonDisabled}\n                color='primary'\n                onClick={ () => nextPokemon() } >\n                    Next!\n            </Button>\n            <ScoreIcon style={iconStyle} />\n            <label className='score'>Score: {score}</label>\n        </div>\n    );\n}\n\nexport default Pokedex;","import './App.css';\nimport Pokedex from './pokedex/Pokedex';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Pokedex />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}